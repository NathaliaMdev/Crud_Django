
Cria uma virtal environment para iniciar o framework
1- virtualenv -p python3 env
2- ativar a virtual env em .\env\Scripts\activate no ""cmd""
3- instalar o framework django  pip install django==3.2.4
4- |django-admin startproject nomedaAPI (ex: Projeto_Poc)
5- Acessar a pasta do Projeto_POC ou referente ao nome do projeto da API
   ex: cd ProjetoPoc
6- Iniciar a Api |Django-admin startapp api
----------------------------------------------------------------------------

7 -No arquivo settings.py acrescentar na lista de installed_app:

 
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',  ( Acrescentar a api)
]
-------------------------------------------------------------------
8- Em settings.py configurar a database que será utilizada na API 


Por exemplo: 
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'poc',
        'USER': 'root',
        'PASSWORD': 'Dark@@120897',
        'HOST': 'localhost',
        'PORT': '3306',
	'OPTIONS':{
	      'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
	}

    }
}
-----------------------------------------------------------
9- Agora, precisamos criar o modelo da api em models.py

from django.db import models

# Create your models here.

class ProducerItem(models.Model):
    id = models.IntegerField(primary_key=True)
    name= models.CharField(max_length=40)
    created_at=models.DateTimeField()
    updated_at=models.DateTimeField()
    value = models.FloatField()


--------------------------------------------------------------
    
10 - Registrar o produtor ProductorItems em admin.py

from django.contrib import admin
from .models import ProducerItem
# Register your models here.


admin.site.register(ProducerItem)

---------------------------------------------------------------

11 - Agora vamos instalar o mysqlclient na nossa virtualenv

pip install mysqlclient pymysql  (garanta que esteja no cmd)
---------------------------------------------------------------
12 - agora vamos rodar o python manage.py migrate para subir os dados mysql para a virtual env

python manage.py migrate

Caso ocorra algum erro conserte e faça 

python manage.py makemigrations
--------------------------------------------------------------------------
13 - Agora vamos criar um superusuário 

python manage.py createsuperuser

Nome: campolink
e-mail: mine
senha: 123456

-------------------------------------------------------------------------
14 - Executar o servidor com:
 python manage.py runserver

15- utilizar a localização com o final /admin

16- Vamos agora configurar as views no arquivo views.py e montamos o crud
-------------------------------------------------------------
import json
from django.views import View
from django.utils.decorators import method_decorator
from django.http.response import JsonResponse
from .models import ProducerItem
from django.views.decorators.csrf import csrf_exempt


# Create your views here.

class ProducerItemView(View):
    @method_decorator(csrf_exempt)
    def dispatch(self,request, *args, **kwargs):
        return super().dispatch(request, *args, **kwargs)

    def get(self,request, id=0):
        if (id>0):
            producerItems = list(ProducerItem.objects.filter(id=id).values())
            if len(producerItems) >0:
                produtorItems = producerItems[0]
                dados={'message':"Sucess",'ProducerItems':producerItems}
            else:
                dados={'message':'ProducerItems not found...'}
            return JsonResponse(dados)
        producerItems=list(ProducerItem.objects.values())
        if len(producerItems)>0:
            dados={'message':"Sucess",'ProducerItems':producerItems}
        else:
            dados={'message':'ProducerItems not found...'}
        return JsonResponse(dados)
    def post(self,request):
        #print(reques,body)
        jd=json.loads(request.body)
        print(jd)
        ProducerItem.objects.create(name=jd['name'], created_at=jd['created_at'], updated_at=jd['updated_at'],value=jd['value'])
        #print(jd)
        return JsonResponse({'message':'Sucess'})
    def put(self, request, id):
        jd = json.loads(request.body)
        producerItems = list(ProducerItem.objects.filter(id=id).values())
        if len(producerItems) >0:
            produtoritem = ProducerItem.objects.get(id=id)
            produtoritem.name=jd['name']
            produtoritem.created_at=jd['created_at']
            produtoritem.updated_at=jd['updated_at']
            produtoritem.value=jd['value']
            produtoritem.save()
            dados = {'message': "Sucess"}
        else:
            dados = {'message:"Product not found...'}
        return JsonResponse(dados)
    def delete(self,request, id):
        produtoritem = list(ProducerItem.objects.filter(id=id).values())
        if len(produtoritem)>0:
            ProducerItem.objects.filter(id=id).delete()
            dados = {'message':"Sucess"}
        else:
            dados = {'message': "Company not found..."}
        return JsonResponse(dados)

------------------------------------------------------------------

 Na api criar uma urls.py e acrescentar 

from django.urls import path
from .views import ProducerItemView

urlpatterns = [
        path('producerItem/', ProducerItemView.as_view(), name='producerItem_list'),
        path('producerItem/<int:id>', ProducerItemView.as_view(), name='producerItem_process')

-----------------------------------------------------------------
E na pasta do projeto na mesma pasta chamada urls.py acrescentar

"""Projeto_Poc URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path,include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/',include('api.urls')),

]
-----------------------------------------------------